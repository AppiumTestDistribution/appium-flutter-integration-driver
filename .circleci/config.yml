# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference

# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/testing-ios/
on:
   pull_request:
      types: [opened, reopened]
version: 2.1

executors:
   macos_executor:
      macos:
         xcode: 15.2.0

jobs:
   checkout_code:
      executor: macos_executor
      steps:
         - checkout
         - run: xcrun simctl list devices available

   setup_node:
      executor: macos_executor
      steps:
         - run:
              name: Install Node Version
              command: |
                 nvm install v20.2.0 && nvm alias default 20.2.0
                 node -v

   install_appium:
      executor: macos_executor
      steps:
         - run:
              name: Install Appium
              command: npm install -g appium

   fetch_ios_app:
      executor: macos_executor
      steps:
         - run:
              name: Fetch iOS App
              command: |
                 release_info=$(curl -s https://api.github.com/repos/AppiumTestDistribution/appium-flutter-server/releases/latest)
                 asset_urls=$(echo "$release_info" | grep "browser_download_url" | cut -d '"' -f 4)
                 ios_app=$(echo "$asset_urls" | tail -n 1)
                 echo "$ios_app"
                 curl -LO $ios_app
                 echo 'export APP_PATH=$CIRCLE_WORKING_DIRECTORY/ios.zip' >> $BASH_ENV

   setup_simulator:
      executor: macos_executor
      steps:
         - run:
              name: Setup Simulator
              command: |
                 target_sim_id=$(xcrun simctl list devices available | grep "iPhone 14" | cut -d "(" -f2 | cut -d ")" -f1 | head -n 1)
                 echo $target_sim_id
                 echo 'export UDID=$target_sim_id' >> $BASH_ENV
                 xcrun simctl boot $target_sim_id
                 xcrun simctl bootstatus $target_sim_id -b

   build_wda:
      executor: macos_executor
      steps:
         - run:
              name: Build WebDriverAgent
              command: |
                 npm ci
                 npm run build
                 appium driver run xcuitest build-wda
                 wda=$(ls -d /Users/distiller/Library/Developer/Xcode/DerivedData/WebDriverAgent*)
                 echo $wda
                 echo 'export WDA_PATH=$wda' >> $BASH_ENV
                 xcrun simctl install $target_sim_id $wda/Build/Products/Debug-iphonesimulator/WebDriverAgentRunner-Runner.app
                 xcrun simctl launch $target_sim_id "com.facebook.WebDriverAgentRunner.xctrunner"

   run_wdio_ios_tests:
      executor: macos_executor
      steps:
         - run:
              name: Run WDIO iOS Tests
              command: |
                 mkdir appium-logs
                 git clone https://github.com/AppiumTestDistribution/flutter-finder.git
                 UDID=$target_sim_id APP_PATH=$ios_app npm run wdio-ios-ci
         - store_artifacts:
              path: appium-logs
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
   ios: # This is the name of the workflow, feel free to change it to better match your workflow.
      # Inside the workflow, you define the jobs you want to run.
      jobs:
         - checkout_code
         - setup_node
         - install_appium
         - fetch_ios_app
         - setup_simulator
         - build_wda
         - run_wdio_ios_tests
