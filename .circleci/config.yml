# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference

# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/testing-ios/
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. 
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    macos:
      # Specify the Xcode version you desire here
      # See: https://circleci.com/docs/using-macos/
      xcode: 15.2.0 

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run: xcrun simctl list devices available
      - run: 
        name: Boot Simulator
        command: |
          target_sim_id=$(xcrun simctl list devices available | grep "iPhone 14" | cut -d "(" -f2 | cut -d ")" -f1 | head -n 1)
          echo $target_sim_id
          echo 'export UDID=$target_sim_id' >> "$BASH_ENV"
          xcrun simctl boot $target_sim_id
          xcrun simctl bootstatus $target_sim_id -b
          echo ${UDID}
      - run:
          name: Node Version
          command: |
            nvm install v19.0.0 && nvm alias default 19.0.0
      - run:
          name: Install Appium and Run iOS Test
          command: |
            nvm install v19.0.0 && nvm alias default 19.0.0
            node -v
            npm install -g appium
            appium driver install xcuitest
            appium driver run xcuitest build-wda 
            npm install
            npm run build
            wda=$(ls -d /Users/runner/Library/Developer/Xcode/DerivedData/WebDriverAgent*)
            echo $wda
            echo 'export WDA_PATH=$wda' >> "$BASH_ENV"
            echo ${WDA_PATH}

      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: test_output
      - store_artifacts:
          path: test_output
          destination: scan-output

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build